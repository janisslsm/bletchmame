####################################
# BletchMAME Windows Github Action #
####################################

name: Windows

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:

    # Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Checkout Repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install MSYS2
    - name: Install MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: git make mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-qt6-static

    # Generate buildversion.txt
    - name: Generate buildversion.txt
      run: |
        git describe --tags | python version.py | tee buildversion.txt

    # Generate src/buildversion.gen.cpp
    - name: Generate src/buildversion.gen.cpp
      run: |
        sh >src/buildversion.gen.cpp  -c 'echo const char buildVersion[] = \"$(shell cat buildversion.txt 2>NUL)\"\;'
        sh >>src/buildversion.gen.cpp -c 'echo const char buildRevision[] = \"$(shell git rev-parse HEAD 2>NUL)\"\;'
        sh >>src/buildversion.gen.cpp -c 'echo const char buildDateTime[] = \"`date -Ins`\"\;'

    # Build BletchMAME
    - name: Build BletchMAME
      run: |
        cmake . -G "MSYS Makefiles" -DQt6_DIR=/mingw64/qt6-static/lib/cmake/Qt6 -DQt6Test_DIR=/mingw64/qt6-static/lib/cmake/Qt6Test -DCMAKE_MAKE_PROGRAM=make -DHAS_BUILDVERSION_GEN_CPP=1
        make -j 8
        strip ./BletchMAME.exe

    # Run Unit Tests
    - name: Run Unit Tests
      run: ./BletchMAME_tests.exe

    # Run integration testing with actual MAME
    - name: Run integration testing with actual MAME
      shell: bash
      run: |
        test -d deps || mkdir deps
        test -d deps/roms || mkdir deps/roms
        curl -L "https://www.mamedev.org/roms/alienar/alienar.zip" > deps/roms/alienar.zip
        ./test_mame_interactions.sh mame0213
        ./test_mame_interactions.sh mame0218
        ./test_mame_interactions.sh mame0224
        ./test_mame_interactions.sh mame0225

    # Install PanDoc
    - name: Install PanDoc
      shell: bash
      run: |
        test -d deps || mkdir deps
        curl -L -f "https://github.com/jgm/pandoc/releases/download/2.10.1/pandoc-2.10.1-windows-x86_64.zip" > deps/pandoc-2.10.1-windows-x86_64.zip
        7z x deps/pandoc-2.10.1-windows-x86_64.zip -odeps

    # Generate readme.html
    - name: Generate readme.html
      run: deps/pandoc-2.10.1/pandoc.exe README.md -o readme.html

    # Build MSI - Candle
    - name: Build MSI - Candle
      run: /c/program\ files\ \(x86\)/WiX\ Toolset\ v3.11/bin/candle -v bletchmame.wxs -dVERSION=`cat buildversion.txt` -dQTBIN=./deps/Qt/5.15.1/mingw81_64/bin -out bletchmame.wixobj
        
    # Build MSI - Light
    - name: Build MSI - Light
      run: /c/program\ files\ \(x86\)/WiX\ Toolset\ v3.11/bin/light -v -ext WixUIExtension -ext WixUtilExtension bletchmame.wixobj -out BletchMAME.msi
        
    # Prepare Artifacts
    - name: Prepare Artifacts
      shell: bash
      run: |
        mkdir rel
        cp buildversion.txt rel/version_latest.txt
        mv BletchMAME.msi rel/BletchMAME_latest.msi
        7z a rel/BletchMAME_latest.zip BletchMAME.exe
        7z a rel/BletchMAME_latest.zip readme.html
        7z a rel/BletchMAME_latest.zip plugins

    # Configure AWS Credentials
    - name: Configure AWS Credentials
      if: success() && github.ref == 'refs/heads/master'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
      
    # Deploy Artifacts to S3
    - name: Deploy Artifacts to S3
      if: success() && github.ref == 'refs/heads/master'
      shell: bash
      run: aws s3 sync ./rel/ s3://bletchmame/files/ --delete
